import email
import smtplib
from email.parser import Parser
from email.header import decode_header
from email.utils import parseaddr
from importlib import reload

import pandas as pd
import poplib
import json
import datetime as dt

from Calf.data import ModelData

from Calf.models.base_model import BaseModel
class Email:
    @classmethod
    def send_email(cls, msgTo, content):
        try:
            msg = email.mime.multipart.MIMEMultipart()
            msgFrom = 'leungjain@163.com'  # 从该邮箱发送
            msgTo = msgTo  # 发送到该邮箱
            smtpSever = 'smtp.163.com'  # 163邮箱的smtp Sever地址
            smtpPort = '25'  # 开放的端口
            sqm = '7891190129lj'  # 在登录smtp时需要login中的密码应当使用授权码而非账户密码
            msg['from'] = msgFrom
            msg['to'] = msgTo
            msg['subject'] = '曲速智选'
            content = content

            txt = email.mime.text.MIMEText(content)
            msg.attach(txt)
            smtp = smtplib.SMTP()

            '''
            smtplib的connect（连接到邮件服务器）、login（登陆验证）、sendmail（发送邮件）
            '''
            smtp.connect(smtpSever, smtpPort)
            smtp.login(msgFrom, sqm)
            smtp.sendmail(msgFrom, msgTo, str(msg))
            smtp.quit()
            # print('发送成功')
            return True
        except Exception as e:
            print(e)
            # print('发送失败!')
            return False

class EmailServicce:

    email = '804533125@qq.com'
    password = 'arlpkwyokphxbcbg'
    pop3_server = 'pop.qq.com'
    content={'user':email}
    result=list()

    # -*- coding: utf-8 -*-
    def guess_charset(self,msg):
        charset = msg.get_charset()
        if charset is None:
            content_type = msg.get('Content-Type', '').lower()
            pos = content_type.find('charset=')
            if pos >= 0:
                charset = content_type[pos + 8:].strip()
        return charset

    def decode_str(self,s):
        value, charset = decode_header(s)[0]
        if charset:
            value = value.decode(charset)
        return value

    def print_info(self,msg, indent=0):
        if indent == 0:
            for header in ['From', 'To', 'Subject']:
                value = msg.get(header, '')
                if value:
                    if header == 'Subject':
                        value =self.decode_str(value)
                    else:
                        hdr, addr = parseaddr(value)
                        name = self.decode_str(hdr)
                        value = u'%s <%s>' % (name, addr)
                self.content[header]=str(value)
        if (msg.is_multipart()):
            parts = msg.get_payload()
            for n, part in enumerate(parts):
                self.print_info(part, indent + 1)
        else:
            content_type = msg.get_content_type()
            if content_type == 'text/plain' or content_type == 'text/html':
                content = msg.get_payload(decode=True)
                charset = self.guess_charset(msg)
                if charset:
                    content = content.decode(charset)
                self.content['text']= str(content)
            else:
                print('%sAttachment: %s' % ('  ' * indent, content_type))

    def log_length(self,length):
        obj=BaseModel('email_log')
        curror=obj.query({'user':self.email})
        if curror.count():
            lg=pd.DataFrame(list(curror)).loc[0].length
            obj.remove({})
            obj.insert_batch(dict(date=dt.datetime.now(), user=self.email, length=length))
            return lg
        else:
            obj.insert_batch(dict(date=dt.datetime.now(),user=self.email,length=length))
            return length-1
    def parse_data(self,data):
        # from lxml import etree
        import re
        # e = etree.HTML(data)
        # data = e.xpath("//td[@width='95%']")
        # data=data[0].text
        data = re.sub(u"\\<.*?\\>", "", data)
        data = data.split('\r\n\t')
        data=data[3]
        data=data.replace('下半大','下半大\n')
        data=data.replace('上半大','上半大\n')
        print(data)
        return data
    def exe(self,fromwho):
        # 连接到POP3服务器:
        server = poplib.POP3_SSL(self.pop3_server, 995)
        # 可以打开或关闭调试信息:
        server.set_debuglevel(1)
        # 可选:打印POP3服务器的欢迎文字:
        print(server.getwelcome().decode('utf-8'))
        # 身份认证:
        server.user(self.email)
        server.pass_(self.password)
        # stat()返回邮件数量和占用空间:
        # print('Messages: %s. Size: %s' % server.stat())
        # list()返回所有邮件的编号:
        resp, mails, octets = server.list()
        # 可以查看返回的列表类似[b'1 82923', b'2 2184', ...]
        length=self.log_length(length=server.stat()[0])
        index=range(length+1,server.stat()[0]+1)

        for i in index:
            resp, lines, octets = server.retr(i)
            # lines存储了邮件的原始文本的每一行,
            # 可以获得整个邮件的原始文本:
            msg_content = b'\r\n'.join(lines).decode('utf-8')
            # 稍后解析出邮件:
            msg = Parser().parsestr(msg_content)

            self.print_info(msg)

            # print(self.content)
            # print('==========================')
            if fromwho in self.content['From']:
                self.result.append(self.content)
            self.content={'user':self.email}
        server.quit()
        return self.result


# fromwho='leungjain@163.com'
# data=EmailServicce().exe(fromwho=fromwho)
# # data=pd.DataFrame(data)
# BaseModel('email_data').insert_batch(data)
# json.dumps(data)
#
# data=ModelData(location='server_db',dbname='big-data').read_data(table_name='email_data')
#
# data=data.text.iloc[-1]
# EmailServicce().parse_data(data=data)

#说明==================================
# step1  修改fromwho='leungjain@163.com' 发送邮件的对象，用于过滤
# step2  修改 email = '804533125@qq.com' 接收邮件的对象 登录使用
# step3  修改  password = 'arlpkwyokphxbcbg' 这个不是普通的密码 是用于支持pop3协议的授权码
#如果我不在，可以参考官网的说明，开通授权 地址如下：
#http://service.mail.qq.com/cgi-bin/help?subtype=1&id=28&no=1001256
# step4  添加计划任务
#说明==================================


# import re
# s="我是一个人(中国人)aaa[真的]bbbb{确定}"
# a = re.sub(u"\\(.*?\\)|\\{.*?}|\\[.*?]", "", s)
# print (a)

# data=ModelData(location='server_db',dbname='big-data').read_data(table_name='email_data')
#
# data=data.text.iloc[-1]
# print(data)
# print('----------')
#

# data=['399001', '399106', '399005', '399101', '399006', '399102', '399303', '000001', '000016', '880578', '880579', '880577', '880574', '880575', '880572', '880573', '880570', '880571', '880400', '880368', '880503', '880502', '880501', '880507', '880506', '880505', '880504', '880489', '880482', '880483', '880486', '880361', '880484', '880485', '880409', '880477', '880476', '880474', '880473', '880472', '880471', '880374', '880375', '880372', '880373', '880626', '880627', '880624', '880625', '880622', '880623', '880620', '880621', '880628', '880629', '880394', '880392', '880393', '880390', '880391', '880398', '880399', '880530', '880653', '880652', '880651', '880650', '880657', '880656', '880655', '880654', '880929', '880659', '880658', '880928', '880431', '880430', '880921', '880228', '880211', '880210', '880219', '880990', '880991', '880992', '880661', '880448', '880446', '880447', '880444', '880445', '880442', '880443', '880440', '880441', '880533', '880439', '880438', '880536', '880537', '880534', '880535', '880925', '880432', '880927', '880926', '880437', '880920', '880923', '880922', '880213', '880212', '880668', '880669', '880217', '880216', '880215', '880214', '880662', '880663', '880660', '880218', '880666', '880667', '880664', '880665', '880327', '880326', '880325', '880324', '880321', '880320', '880329', '880328', '880569', '880568', '880564', '880567', '880566', '880560', '880563', '880468', '880318', '880319', '880312', '880313', '880310', '880311', '880491', '880490', '880493', '880492', '880494', '880497', '880402', '880403', '880369', '880401', '880406', '880407', '880363', '880362', '880408', '880360', '880367', '880366', '880364', '880635', '880634', '880637', '880636', '880631', '880630', '880633', '880632', '880639', '880638', '880387', '880229', '880381', '880380', '880383', '880382', '880222', '880223', '880220', '880221', '880226', '880227', '880224', '880225', '880478', '880462', '880541', '880540', '880424', '880425', '880426', '880420', '880421', '880930', '880548', '880594', '880595', '880596', '880597', '880459', '880591', '880989', '880988', '880455', '880986', '880985', '880984', '880983', '880599', '880453', '880452', '880909', '880855', '880202', '880203', '880918', '880919', '880523', '880522', '880525', '880524', '880527', '880526', '880910', '880911', '880912', '880913', '880915', '880916', '880917', '880679', '880678', '880671', '880670', '880673', '880672', '880675', '880674', '880677', '880676', '880588', '880350', '880351', '880355', '000300', '880558', '880559', '880550', '880551', '880552', '880553', '880554', '880556', '880557', '880954', '880950', '880951', '880952', '880953', '880308', '880305', '880307', '880306', '880301', '880303', '880302', '880411', '880410', '880413', '880412', '880414', '880419', '880418', '880600', '880601', '880602', '880603', '880604', '880605', '880606', '880607', '880608', '880609', '880231', '880230', '880232', '880592', '880593', '880987', '880454', '880456', '880598', '880982', '880981', '880590', '000905', '880583', '880582', '880581', '880580', '880587', '880586', '880585', '880584', '880460', '880461', '880589', '880463', '880464', '880465', '880466', '880467', '880907', '880906', '880905', '880904', '880903', '880902', '880901', '880862', '880908', '880519', '880515', '880516', '880513', '880521', '880520', '880613', '880340', '880345', '880344', '880347', '880346', '880348', '880612', '880529', '880528', '880644', '880645', '880646', '880647', '880640', '880641', '880642', '880643', '880648', '880649', '880949', '880948', '880943', '880942', '880941', '880940', '880947', '880946', '880945', '880944', '880338', '880339', '880330', '880335', '880336', '880337', '880423', '880547', '880546', '880545', '880544', '880542', '880938', '880939', '880936', '880937', '880531', '880935', '880932', '880933', '880422', '880931', '880204', '880205', '880206', '880207', '880201', '880619', '880618', '880617', '880616', '880615', '880614', '880208', '880209', '880610', '880680', '880681', '880682', '880683', '880684', '880685', '880549', '880993']
#
#

# import pandas as pd
# data=['399001', '399106', '399005', '399101', '399006', '399102', '399303', '000001', '000300', '000905', '000016', '880578', '880579', '880577', '880574', '880575', '880572', '880573', '880570', '880571', '880400', '880368', '880503', '880502', '880501', '880507', '880506', '880505', '880504', '880489', '880482', '880483', '880486', '880361', '880484', '880485', '880409', '880477', '880476', '880474', '880473', '880472', '880471', '880374', '880375', '880372', '880373', '880626', '880627', '880624', '880625', '880622', '880623', '880620', '880621', '880628', '880629', '880394', '880392', '880393', '880390', '880391', '880398', '880399', '880530', '880653', '880652', '880651', '880650', '880657', '880656', '880655', '880654', '880929', '880659', '880658', '880928', '880431', '880430', '880921', '880228', '880211', '880210', '880219', '880990', '880991', '880992', '880661', '880448', '880446', '880447', '880444', '880445', '880442', '880443', '880440', '880441', '880533', '880439', '880438', '880536', '880537', '880534', '880535', '880925', '880432', '880927', '880926', '880437', '880920', '880923', '880922', '880213', '880212', '880668', '880669', '880217', '880216', '880215', '880214', '880662', '880663', '880660', '880218', '880666', '880667', '880664', '880665', '880327', '880326', '880325', '880324', '880321', '880320', '880329', '880328', '880569', '880568', '880564', '880567', '880566', '880560', '880563', '880468', '880318', '880319', '880312', '880313', '880310', '880311', '880491', '880490', '880493', '880492', '880494', '880497', '880402', '880403', '880369', '880401', '880406', '880407', '880363', '880362', '880408', '880360', '880367', '880366', '880364', '880635', '880634', '880637', '880636', '880631', '880630', '880633', '880632', '880639', '880638', '880387', '880229', '880381', '880380', '880383', '880382', '880222', '880223', '880220', '880221', '880226', '880227', '880224', '880225', '880478', '880462', '880541', '880540', '880424', '880425', '880426', '880420', '880421', '880930', '880548', '880594', '880595', '880596', '880597', '880459', '880591', '880989', '880988', '880455', '880986', '880985', '880984', '880983', '880599', '880453', '880452', '880909', '880855', '880202', '880203', '880918', '880919', '880523', '880522', '880525', '880524', '880527', '880526', '880910', '880911', '880912', '880913', '880915', '880916', '880917', '880679', '880678', '880671', '880670', '880673', '880672', '880675', '880674', '880677', '880676', '880588', '000001', '880350', '880351', '880355', '000300', '880558', '880559', '880550', '880551', '880552', '880553', '880554', '880556', '880557', '880954', '880950', '880951', '880952', '880953', '880308', '880305', '880307', '880306', '880301', '880303', '880302', '880411', '880410', '880413', '880412', '880414', '880419', '880418', '880600', '880601', '880602', '880603', '880604', '880605', '880606', '880607', '880608', '880609', '880231', '880230', '880232', '880592', '880593', '880987', '880454', '880456', '880598', '880982', '880981', '880590', '000905', '880583', '880582', '880581', '880580', '880587', '880586', '880585', '880584', '880460', '880461', '880589', '880463', '880464', '880465', '880466', '880467', '880907', '880906', '880905', '880904', '880903', '880902', '880901', '880862', '880908', '880519', '880515', '880516', '880513', '880521', '000016', '880520', '880613', '880340', '880345', '880344', '880347', '880346', '880348', '880612', '880529', '880528', '880644', '880645', '880646', '880647', '880640', '880641', '880642', '880643', '880648', '880649', '880949', '880948', '880943', '880942', '880941', '880940', '880947', '880946', '880945', '880944', '880338', '880339', '880330', '880335', '880336', '880337', '880423', '880547', '880546', '880545', '880544', '880542', '880938', '880939', '880936', '880937', '880531', '880935', '880932', '880933', '880422', '880931', '880204', '880205', '880206', '880207', '880201', '880619', '880618', '880617', '880616', '880615', '880614', '880208', '880209', '880610', '880680', '880681', '880682', '880683', '880684', '880685', '880549', '880993']
# data.sort()
# print(data)
# obj=BaseModel('A_All_MACD_left_right_index_min5_version4')
# data=obj.query(sql={'stock_code':{'$in':['000001','000016','000300','000905']}})
# data=(pd.DataFrame(list(data)))
# data = pd.DataFrame([[1, 2], [1, 3], [2, 0]], columns=['a', 'b'])
# data['b'] = data.apply(lambda r: r.b + 1 if r.a > 1 else r.b, axis=1)
# print(data)
